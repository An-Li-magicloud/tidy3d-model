"{\n  \"title\": \"Simulation\",\n  \"description\": \"Contains all information about Tidy3d simulation.\\n\\nParameters\\n----------\\ncenter : Tuple[float, float, float] = (0.0, 0.0, 0.0)\\n    [units = um].  Center of object in x, y, and z.\\nsize : Tuple[Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf]] = None\\n    [units = um].  Size in x, y, and z directions.\\ngrid_size : Tuple[Union[PositiveFloat, List[pydantic.types.PositiveFloat]], Union[PositiveFloat, List[pydantic.types.PositiveFloat]], Union[PositiveFloat, List[pydantic.types.PositiveFloat]]] = None\\n    [units = um].  If components are float, uniform grid size along x, y, and z. If components are array like, defines an array of nonuniform grid sizes centered at the simulation center . Note: if supplied sizes do not cover the simulation size, the first and last sizes are repeated to cover size. \\nmedium : Union[Medium, AnisotropicMedium, PECMedium, PoleResidue, Sellmeier, Lorentz, Debye, Drude] = Medium(name=None, frequency_range=None, type='Medium', permittivity=1.0, conductivity=0.0)\\n    Background medium of simulation, defaults to vacuum if not specified.\\nrun_time : NonNegativeFloat = 0.0\\n    [units = sec].  Total electromagnetic evolution time in seconds. Note: If simulation 'shutoff' is specified, simulation will terminate early when shutoff condition met.\\nstructures : List[Structure] = []\\n    List of structures present in simulation. Note: Structures defined later in this list override the simulation material properties in regions of spatial overlap.\\nsources : List[Union[VolumeSource, PlaneWave, ModeSource, GaussianBeam]] = []\\n    List of electric current sources injecting fields into the simulation.\\nmonitors : List[Union[FieldMonitor, FieldTimeMonitor, FluxMonitor, FluxTimeMonitor, ModeMonitor]] = []\\n    List of monitors in the simulation. Note: monitor names are used to access data after simulation is run.\\npml_layers : Tuple[Union[PML, StablePML, Absorber, NoneType], Union[PML, StablePML, Absorber, NoneType], Union[PML, StablePML, Absorber, NoneType]] = (None, None, None)\\n    Specifications for the absorbing layers on x, y, and z edges. If ``None``, no absorber will be added on that dimension and periodic boundary conditions will be used.\\nsymmetry : Tuple[Literal[0, -1, 1], Literal[0, -1, 1], Literal[0, -1, 1]] = (0, 0, 0)\\n    Tuple of integers defining reflection symmetry across a plane bisecting the simulation domain normal to the x-, y-, and z-axis, respectvely. Each element can be ``0`` (no symmetry), ``1`` (even, i.e. 'PMC' symmetry) or ``-1`` (odd, i.e. 'PEC' symmetry). Note that the vectorial nature of the fields must be taken into account to correctly determine the symmetry value.\\nshutoff : NonNegativeFloat = 1e-05\\n    Ratio of the instantaneous integrated E-field intensity to the maximum value at which the simulation will automatically terminate time stepping. Used to prevent extraneous run time of simulations with fully decayed fields. Set to ``0`` to disable this feature.\\nsubpixel : bool = True\\n    If ``True``, uses subpixel averaging of the permittivity based on structure definition, resulting in much higher accuracy for a given grid size.\\ncourant : ConstrainedFloatValue = 0.9\\n    Courant stability factor, controls time step to spatial step ratio. Lower values lead to more stable simulations for dispersive materials, but result in longer simulation times.\\nversion : str = 1.0.0\\n    String specifying the front end version number.\\n\\nExample\\n-------\\n>>> sim = Simulation(\\n...     size=(2.0, 2.0, 2.0),\\n...     grid_size=(0.1, 0.1, 0.1),\\n...     run_time=40e-11,\\n...     structures=[\\n...         Structure(\\n...             geometry=Box(size=(1, 1, 1), center=(-1, 0, 0)),\\n...             medium=Medium(permittivity=2.0),\\n...         ),\\n...     ],\\n...     sources=[\\n...         VolumeSource(\\n...             size=(0, 0, 0),\\n...             center=(0, 0.5, 0),\\n...             polarization=\\\"Hx\\\",\\n...             source_time=GaussianPulse(\\n...                 freq0=2e14,\\n...                 fwidth=4e13,\\n...             ),\\n...         )\\n...     ],\\n...     monitors=[\\n...         FieldMonitor(size=(0, 0, 0), center=(0, 0, 0), freqs=[1.5e14, 2e14], name='point'),\\n...         FluxMonitor(size=(1, 1, 0), center=(0, 0, 0), freqs=[2e14, 2.5e14], name='flux'),\\n...     ],\\n...     symmetry=(0, 0, 0),\\n...     pml_layers=(\\n...         PML(num_layers=20),\\n...         PML(num_layers=30),\\n...         None,\\n...     ),\\n...     shutoff=1e-6,\\n...     courant=0.8,\\n...     subpixel=False,\\n... )\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"center\": {\n      \"title\": \"Center\",\n      \"description\": \"Center of object in x, y, and z.\",\n      \"default\": [\n        0.0,\n        0.0,\n        0.0\n      ],\n      \"units\": \"um\",\n      \"type\": \"array\",\n      \"minItems\": 3,\n      \"maxItems\": 3,\n      \"items\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"number\"\n        }\n      ]\n    },\n    \"type\": {\n      \"title\": \"Type\",\n      \"default\": \"Simulation\",\n      \"enum\": [\n        \"Simulation\"\n      ],\n      \"type\": \"string\"\n    },\n    \"size\": {\n      \"title\": \"Size\",\n      \"description\": \"Size in x, y, and z directions.\",\n      \"units\": \"um\",\n      \"type\": \"array\",\n      \"minItems\": 3,\n      \"maxItems\": 3,\n      \"items\": [\n        {\n          \"anyOf\": [\n            {\n              \"type\": \"number\",\n              \"minimum\": 0\n            },\n            {\n              \"$ref\": \"#/definitions/Inf\"\n            }\n          ]\n        },\n        {\n          \"anyOf\": [\n            {\n              \"type\": \"number\",\n              \"minimum\": 0\n            },\n            {\n              \"$ref\": \"#/definitions/Inf\"\n            }\n          ]\n        },\n        {\n          \"anyOf\": [\n            {\n              \"type\": \"number\",\n              \"minimum\": 0\n            },\n            {\n              \"$ref\": \"#/definitions/Inf\"\n            }\n          ]\n        }\n      ]\n    },\n    \"grid_size\": {\n      \"title\": \"Grid Size\",\n      \"description\": \"If components are float, uniform grid size along x, y, and z. If components are array like, defines an array of nonuniform grid sizes centered at the simulation center . Note: if supplied sizes do not cover the simulation size, the first and last sizes are repeated to cover size. \",\n      \"units\": \"um\",\n      \"type\": \"array\",\n      \"minItems\": 3,\n      \"maxItems\": 3,\n      \"items\": [\n        {\n          \"anyOf\": [\n            {\n              \"type\": \"number\",\n              \"exclusiveMinimum\": 0\n            },\n            {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"number\",\n                \"exclusiveMinimum\": 0\n              }\n            }\n          ]\n        },\n        {\n          \"anyOf\": [\n            {\n              \"type\": \"number\",\n              \"exclusiveMinimum\": 0\n            },\n            {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"number\",\n                \"exclusiveMinimum\": 0\n              }\n            }\n          ]\n        },\n        {\n          \"anyOf\": [\n            {\n              \"type\": \"number\",\n              \"exclusiveMinimum\": 0\n            },\n            {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"number\",\n                \"exclusiveMinimum\": 0\n              }\n            }\n          ]\n        }\n      ]\n    },\n    \"medium\": {\n      \"title\": \"Background Medium\",\n      \"description\": \"Background medium of simulation, defaults to vacuum if not specified.\",\n      \"default\": {\n        \"name\": null,\n        \"frequency_range\": null,\n        \"type\": \"Medium\",\n        \"permittivity\": 1.0,\n        \"conductivity\": 0.0\n      },\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Medium\"\n        },\n        {\n          \"$ref\": \"#/definitions/AnisotropicMedium\"\n        },\n        {\n          \"$ref\": \"#/definitions/PECMedium\"\n        },\n        {\n          \"$ref\": \"#/definitions/PoleResidue\"\n        },\n        {\n          \"$ref\": \"#/definitions/Sellmeier\"\n        },\n        {\n          \"$ref\": \"#/definitions/Lorentz\"\n        },\n        {\n          \"$ref\": \"#/definitions/Debye\"\n        },\n        {\n          \"$ref\": \"#/definitions/Drude\"\n        }\n      ]\n    },\n    \"run_time\": {\n      \"title\": \"Run Time\",\n      \"description\": \"Total electromagnetic evolution time in seconds. Note: If simulation 'shutoff' is specified, simulation will terminate early when shutoff condition met.\",\n      \"default\": 0.0,\n      \"units\": \"sec\",\n      \"minimum\": 0,\n      \"type\": \"number\"\n    },\n    \"structures\": {\n      \"title\": \"Structures\",\n      \"description\": \"List of structures present in simulation. Note: Structures defined later in this list override the simulation material properties in regions of spatial overlap.\",\n      \"default\": [],\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/Structure\"\n      }\n    },\n    \"sources\": {\n      \"title\": \"Sources\",\n      \"description\": \"List of electric current sources injecting fields into the simulation.\",\n      \"default\": [],\n      \"type\": \"array\",\n      \"items\": {\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/definitions/VolumeSource\"\n          },\n          {\n            \"$ref\": \"#/definitions/PlaneWave\"\n          },\n          {\n            \"$ref\": \"#/definitions/ModeSource\"\n          },\n          {\n            \"$ref\": \"#/definitions/GaussianBeam\"\n          }\n        ]\n      }\n    },\n    \"monitors\": {\n      \"title\": \"Monitors\",\n      \"description\": \"List of monitors in the simulation. Note: monitor names are used to access data after simulation is run.\",\n      \"default\": [],\n      \"type\": \"array\",\n      \"items\": {\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/definitions/FieldMonitor\"\n          },\n          {\n            \"$ref\": \"#/definitions/FieldTimeMonitor\"\n          },\n          {\n            \"$ref\": \"#/definitions/FluxMonitor\"\n          },\n          {\n            \"$ref\": \"#/definitions/FluxTimeMonitor\"\n          },\n          {\n            \"$ref\": \"#/definitions/ModeMonitor\"\n          }\n        ]\n      }\n    },\n    \"pml_layers\": {\n      \"title\": \"Absorbing Layers\",\n      \"description\": \"Specifications for the absorbing layers on x, y, and z edges. If ``None``, no absorber will be added on that dimension and periodic boundary conditions will be used.\",\n      \"default\": [\n        null,\n        null,\n        null\n      ],\n      \"type\": \"array\",\n      \"minItems\": 3,\n      \"maxItems\": 3,\n      \"items\": [\n        {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/PML\"\n            },\n            {\n              \"$ref\": \"#/definitions/StablePML\"\n            },\n            {\n              \"$ref\": \"#/definitions/Absorber\"\n            }\n          ]\n        },\n        {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/PML\"\n            },\n            {\n              \"$ref\": \"#/definitions/StablePML\"\n            },\n            {\n              \"$ref\": \"#/definitions/Absorber\"\n            }\n          ]\n        },\n        {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/PML\"\n            },\n            {\n              \"$ref\": \"#/definitions/StablePML\"\n            },\n            {\n              \"$ref\": \"#/definitions/Absorber\"\n            }\n          ]\n        }\n      ]\n    },\n    \"symmetry\": {\n      \"title\": \"Symmetries\",\n      \"description\": \"Tuple of integers defining reflection symmetry across a plane bisecting the simulation domain normal to the x-, y-, and z-axis, respectvely. Each element can be ``0`` (no symmetry), ``1`` (even, i.e. 'PMC' symmetry) or ``-1`` (odd, i.e. 'PEC' symmetry). Note that the vectorial nature of the fields must be taken into account to correctly determine the symmetry value.\",\n      \"default\": [\n        0,\n        0,\n        0\n      ],\n      \"type\": \"array\",\n      \"minItems\": 3,\n      \"maxItems\": 3,\n      \"items\": [\n        {\n          \"enum\": [\n            0,\n            -1,\n            1\n          ],\n          \"type\": \"integer\"\n        },\n        {\n          \"enum\": [\n            0,\n            -1,\n            1\n          ],\n          \"type\": \"integer\"\n        },\n        {\n          \"enum\": [\n            0,\n            -1,\n            1\n          ],\n          \"type\": \"integer\"\n        }\n      ]\n    },\n    \"shutoff\": {\n      \"title\": \"Shutoff Condition\",\n      \"description\": \"Ratio of the instantaneous integrated E-field intensity to the maximum value at which the simulation will automatically terminate time stepping. Used to prevent extraneous run time of simulations with fully decayed fields. Set to ``0`` to disable this feature.\",\n      \"default\": 1e-05,\n      \"minimum\": 0,\n      \"type\": \"number\"\n    },\n    \"subpixel\": {\n      \"title\": \"Subpixel Averaging\",\n      \"description\": \"If ``True``, uses subpixel averaging of the permittivity based on structure definition, resulting in much higher accuracy for a given grid size.\",\n      \"default\": true,\n      \"type\": \"boolean\"\n    },\n    \"courant\": {\n      \"title\": \"Courant Factor\",\n      \"description\": \"Courant stability factor, controls time step to spatial step ratio. Lower values lead to more stable simulations for dispersive materials, but result in longer simulation times.\",\n      \"default\": 0.9,\n      \"exclusiveMinimum\": 0.0,\n      \"maximum\": 1.0,\n      \"type\": \"number\"\n    },\n    \"version\": {\n      \"title\": \"Version\",\n      \"description\": \"String specifying the front end version number.\",\n      \"default\": \"1.0.0\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"size\",\n    \"grid_size\"\n  ],\n  \"additionalProperties\": false,\n  \"definitions\": {\n    \"Inf\": {\n      \"title\": \"Inf\",\n      \"description\": \"Infinity.  Can use built-in instance: ``tidy3d.inf``.\",\n      \"type\": \"object\",\n      \"properties\": {}\n    },\n    \"NegInf\": {\n      \"title\": \"NegInf\",\n      \"description\": \"Negative infinity.  Can use built-in instance as: ``-tidy3d.inf``.\",\n      \"type\": \"object\",\n      \"properties\": {}\n    },\n    \"Medium\": {\n      \"title\": \"Medium\",\n      \"description\": \"Dispersionless medium.\\n\\nParameters\\n----------\\nname : Optional[str] = None\\n    Optional unique name for medium.\\nfrequency_range : Optional[Tuple[Union[float, NegInf], Union[float, Inf]]] = None\\n    [units = Hz].  Optional range of validity for the medium.\\npermittivity : ConstrainedFloatValue = 1.0\\n    [units = None (relative permittivity)].  Relative permittivity.\\nconductivity : ConstrainedFloatValue = 0.0\\n    [units = S/m].  Electric conductivity.  Defined such that the imaginary part of the complex permittivity at angular frequency omega is given by conductivity/omega.\\n\\nExample\\n-------\\n>>> dielectric = Medium(permittivity=4.0, name='my_medium')\\n>>> eps = dielectric.eps_model(200e12)\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"title\": \"Name\",\n          \"description\": \"Optional unique name for medium.\",\n          \"type\": \"string\"\n        },\n        \"frequency_range\": {\n          \"title\": \"Frequency Range\",\n          \"description\": \"Optional range of validity for the medium.\",\n          \"units\": \"Hz\",\n          \"type\": \"array\",\n          \"minItems\": 2,\n          \"maxItems\": 2,\n          \"items\": [\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"$ref\": \"#/definitions/NegInf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"Medium\",\n          \"enum\": [\n            \"Medium\"\n          ],\n          \"type\": \"string\"\n        },\n        \"permittivity\": {\n          \"title\": \"Permittivity\",\n          \"description\": \"Relative permittivity.\",\n          \"default\": 1.0,\n          \"minimum\": 1.0,\n          \"units\": \"None (relative permittivity)\",\n          \"type\": \"number\"\n        },\n        \"conductivity\": {\n          \"title\": \"Conductivity\",\n          \"description\": \"Electric conductivity.  Defined such that the imaginary part of the complex permittivity at angular frequency omega is given by conductivity/omega.\",\n          \"default\": 0.0,\n          \"minimum\": 0.0,\n          \"units\": \"S/m\",\n          \"type\": \"number\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"AnisotropicMedium\": {\n      \"title\": \"AnisotropicMedium\",\n      \"description\": \"Diagonally anisotripic medium.\\n\\nParameters\\n----------\\nname : Optional[str] = None\\n    Optional unique name for medium.\\nfrequency_range : Optional[Tuple[Union[float, NegInf], Union[float, Inf]]] = None\\n    [units = Hz].  Optional range of validity for the medium.\\nxx : Medium = None\\n    Medium describing the xx-component of the diagonal permittivity tensor.\\nyy : Medium = None\\n    Medium describing the yy-component of the diagonal permittivity tensor.\\nzz : Medium = None\\n    Medium describing the zz-component of the diagonal permittivity tensor.\\n\\nNote\\n----\\nOnly diagonal anisotropy and non-dispersive components are currently supported.\\n\\nExample\\n-------\\n>>> medium_xx = Medium(permittivity=4.0)\\n>>> medium_yy = Medium(permittivity=4.1)\\n>>> medium_zz = Medium(permittivity=3.9)\\n>>> anisotropic_dielectric = AnisotropicMedium(xx=medium_xx, yy=medium_yy, zz=medium_zz)\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"title\": \"Name\",\n          \"description\": \"Optional unique name for medium.\",\n          \"type\": \"string\"\n        },\n        \"frequency_range\": {\n          \"title\": \"Frequency Range\",\n          \"description\": \"Optional range of validity for the medium.\",\n          \"units\": \"Hz\",\n          \"type\": \"array\",\n          \"minItems\": 2,\n          \"maxItems\": 2,\n          \"items\": [\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"$ref\": \"#/definitions/NegInf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"AnisotropicMedium\",\n          \"enum\": [\n            \"AnisotropicMedium\"\n          ],\n          \"type\": \"string\"\n        },\n        \"xx\": {\n          \"title\": \"XX Component\",\n          \"description\": \"Medium describing the xx-component of the diagonal permittivity tensor.\",\n          \"allOf\": [\n            {\n              \"$ref\": \"#/definitions/Medium\"\n            }\n          ]\n        },\n        \"yy\": {\n          \"title\": \"YY Component\",\n          \"description\": \"Medium describing the yy-component of the diagonal permittivity tensor.\",\n          \"allOf\": [\n            {\n              \"$ref\": \"#/definitions/Medium\"\n            }\n          ]\n        },\n        \"zz\": {\n          \"title\": \"ZZ Component\",\n          \"description\": \"Medium describing the zz-component of the diagonal permittivity tensor.\",\n          \"allOf\": [\n            {\n              \"$ref\": \"#/definitions/Medium\"\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"xx\",\n        \"yy\",\n        \"zz\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"PECMedium\": {\n      \"title\": \"PECMedium\",\n      \"description\": \"Perfect electrical conductor class.\\n\\nParameters\\n----------\\nname : Optional[str] = None\\n    Optional unique name for medium.\\nfrequency_range : Optional[Tuple[Union[float, NegInf], Union[float, Inf]]] = None\\n    [units = Hz].  Optional range of validity for the medium.\\n\\nNote\\n----\\nTo avoid confusion from duplicate PECs, should import ``tidy3d.PEC`` instance directly.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"title\": \"Name\",\n          \"description\": \"Optional unique name for medium.\",\n          \"type\": \"string\"\n        },\n        \"frequency_range\": {\n          \"title\": \"Frequency Range\",\n          \"description\": \"Optional range of validity for the medium.\",\n          \"units\": \"Hz\",\n          \"type\": \"array\",\n          \"minItems\": 2,\n          \"maxItems\": 2,\n          \"items\": [\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"$ref\": \"#/definitions/NegInf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"PECMedium\",\n          \"enum\": [\n            \"PECMedium\"\n          ],\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"ComplexNumber\": {\n      \"title\": \"ComplexNumber\",\n      \"description\": \"Complex number with a well defined schema.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"real\": {\n          \"title\": \"Real\",\n          \"type\": \"number\"\n        },\n        \"imag\": {\n          \"title\": \"Imag\",\n          \"type\": \"number\"\n        }\n      },\n      \"required\": [\n        \"real\",\n        \"imag\"\n      ]\n    },\n    \"PoleResidue\": {\n      \"title\": \"PoleResidue\",\n      \"description\": \"A dispersive medium described by the pole-residue pair model.\\nThe frequency-dependence of the complex-valued permittivity is described by:\\n\\nParameters\\n----------\\nname : Optional[str] = None\\n    Optional unique name for medium.\\nfrequency_range : Optional[Tuple[Union[float, NegInf], Union[float, Inf]]] = None\\n    [units = Hz].  Optional range of validity for the medium.\\neps_inf : float = 1.0\\n    Relative permittivity at infinite frequency (:math:`\\\\epsilon_\\\\infty`).\\npoles : List[Tuple[Union[tidy3d.components.types.tidycomplex, tidy3d.components.types.ComplexNumber], Union[tidy3d.components.types.tidycomplex, tidy3d.components.types.ComplexNumber]]] = []\\n    [units = rad/sec].  List of complex-valued (:math:`a_i, c_i`) poles for the model.\\n\\nNote\\n----\\n.. math::\\n\\n    \\\\epsilon(\\\\omega) = \\\\epsilon_\\\\infty - \\\\sum_i\\n    \\\\left[\\\\frac{c_i}{j \\\\omega + a_i} +\\n    \\\\frac{c_i^*}{j \\\\omega + a_i^*}\\\\right]\\n\\nExample\\n-------\\n>>> pole_res = PoleResidue(eps_inf=2.0, poles=[((1+2j), (3+4j)), ((5+6j), (7+8j))])\\n>>> eps = pole_res.eps_model(200e12)\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"title\": \"Name\",\n          \"description\": \"Optional unique name for medium.\",\n          \"type\": \"string\"\n        },\n        \"frequency_range\": {\n          \"title\": \"Frequency Range\",\n          \"description\": \"Optional range of validity for the medium.\",\n          \"units\": \"Hz\",\n          \"type\": \"array\",\n          \"minItems\": 2,\n          \"maxItems\": 2,\n          \"items\": [\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"$ref\": \"#/definitions/NegInf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"PoleResidue\",\n          \"enum\": [\n            \"PoleResidue\"\n          ],\n          \"type\": \"string\"\n        },\n        \"eps_inf\": {\n          \"title\": \"Epsilon at Infinity\",\n          \"description\": \"Relative permittivity at infinite frequency (:math:`\\\\epsilon_\\\\infty`).\",\n          \"default\": 1.0,\n          \"type\": \"number\"\n        },\n        \"poles\": {\n          \"title\": \"Poles\",\n          \"description\": \"List of complex-valued (:math:`a_i, c_i`) poles for the model.\",\n          \"default\": [],\n          \"units\": \"rad/sec\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"array\",\n            \"minItems\": 2,\n            \"maxItems\": 2,\n            \"items\": [\n              {\n                \"anyOf\": [\n                  {\n                    \"title\": \"ComplexNumber\",\n                    \"description\": \"Complex number with a well defined schema.\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"real\": {\n                        \"title\": \"Real\",\n                        \"type\": \"number\"\n                      },\n                      \"imag\": {\n                        \"title\": \"Imag\",\n                        \"type\": \"number\"\n                      }\n                    },\n                    \"required\": [\n                      \"real\",\n                      \"imag\"\n                    ]\n                  },\n                  {\n                    \"$ref\": \"#/definitions/ComplexNumber\"\n                  }\n                ]\n              },\n              {\n                \"anyOf\": [\n                  {\n                    \"title\": \"ComplexNumber\",\n                    \"description\": \"Complex number with a well defined schema.\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"real\": {\n                        \"title\": \"Real\",\n                        \"type\": \"number\"\n                      },\n                      \"imag\": {\n                        \"title\": \"Imag\",\n                        \"type\": \"number\"\n                      }\n                    },\n                    \"required\": [\n                      \"real\",\n                      \"imag\"\n                    ]\n                  },\n                  {\n                    \"$ref\": \"#/definitions/ComplexNumber\"\n                  }\n                ]\n              }\n            ]\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Sellmeier\": {\n      \"title\": \"Sellmeier\",\n      \"description\": \"A dispersive medium described by the Sellmeier model.\\nThe frequency-dependence of the refractive index is described by:\\n\\nParameters\\n----------\\nname : Optional[str] = None\\n    Optional unique name for medium.\\nfrequency_range : Optional[Tuple[Union[float, NegInf], Union[float, Inf]]] = None\\n    [units = Hz].  Optional range of validity for the medium.\\ncoeffs : List[Tuple[float, pydantic.types.PositiveFloat]] = None\\n    List of Sellmeier (:math:`B_i, C_i`) coefficients (unitless, microns^2).\\n\\nNote\\n----\\n.. math::\\n\\n    n(\\\\lambda)^2 = 1 + \\\\sum_i \\\\frac{B_i \\\\lambda^2}{\\\\lambda^2 - C_i}\\n\\nExample\\n-------\\n>>> sellmeier_medium = Sellmeier(coeffs=[(1,2), (3,4)])\\n>>> eps = sellmeier_medium.eps_model(200e12)\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"title\": \"Name\",\n          \"description\": \"Optional unique name for medium.\",\n          \"type\": \"string\"\n        },\n        \"frequency_range\": {\n          \"title\": \"Frequency Range\",\n          \"description\": \"Optional range of validity for the medium.\",\n          \"units\": \"Hz\",\n          \"type\": \"array\",\n          \"minItems\": 2,\n          \"maxItems\": 2,\n          \"items\": [\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"$ref\": \"#/definitions/NegInf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"Sellmeier\",\n          \"enum\": [\n            \"Sellmeier\"\n          ],\n          \"type\": \"string\"\n        },\n        \"coeffs\": {\n          \"title\": \"Coefficients\",\n          \"description\": \"List of Sellmeier (:math:`B_i, C_i`) coefficients (unitless, microns^2).\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"array\",\n            \"minItems\": 2,\n            \"maxItems\": 2,\n            \"items\": [\n              {\n                \"type\": \"number\"\n              },\n              {\n                \"type\": \"number\",\n                \"exclusiveMinimum\": 0\n              }\n            ]\n          }\n        }\n      },\n      \"required\": [\n        \"coeffs\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"Lorentz\": {\n      \"title\": \"Lorentz\",\n      \"description\": \"A dispersive medium described by the Lorentz model.\\nThe frequency-dependence of the complex-valued permittivity is described by:\\n\\nParameters\\n----------\\nname : Optional[str] = None\\n    Optional unique name for medium.\\nfrequency_range : Optional[Tuple[Union[float, NegInf], Union[float, Inf]]] = None\\n    [units = Hz].  Optional range of validity for the medium.\\neps_inf : float = 1.0\\n    Relative permittivity at infinite frequency (:math:`\\\\epsilon_\\\\infty`).\\ncoeffs : List[Tuple[float, float, float]] = None\\n    List of (:math:`\\\\Delta\\\\epsilon_i, f_i, \\\\delta_i`) values for model (Hz).\\n\\nNote\\n----\\n.. math::\\n\\n    \\\\epsilon(f) = \\\\epsilon_\\\\infty + \\\\sum_i\\n    \\\\frac{\\\\Delta\\\\epsilon_i f_i^2}{f_i^2 - 2jf\\\\delta_i - f^2}\\n\\nExample\\n-------\\n>>> lorentz_medium = Lorentz(eps_inf=2.0, coeffs=[(1,2,3), (4,5,6)])\\n>>> eps = lorentz_medium.eps_model(200e12)\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"title\": \"Name\",\n          \"description\": \"Optional unique name for medium.\",\n          \"type\": \"string\"\n        },\n        \"frequency_range\": {\n          \"title\": \"Frequency Range\",\n          \"description\": \"Optional range of validity for the medium.\",\n          \"units\": \"Hz\",\n          \"type\": \"array\",\n          \"minItems\": 2,\n          \"maxItems\": 2,\n          \"items\": [\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"$ref\": \"#/definitions/NegInf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"Lorentz\",\n          \"enum\": [\n            \"Lorentz\"\n          ],\n          \"type\": \"string\"\n        },\n        \"eps_inf\": {\n          \"title\": \"Epsilon at Infinity\",\n          \"description\": \"Relative permittivity at infinite frequency (:math:`\\\\epsilon_\\\\infty`).\",\n          \"default\": 1.0,\n          \"type\": \"number\"\n        },\n        \"coeffs\": {\n          \"title\": \"Epsilon at Infinity\",\n          \"description\": \"List of (:math:`\\\\Delta\\\\epsilon_i, f_i, \\\\delta_i`) values for model (Hz).\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"array\",\n            \"minItems\": 3,\n            \"maxItems\": 3,\n            \"items\": [\n              {\n                \"type\": \"number\"\n              },\n              {\n                \"type\": \"number\"\n              },\n              {\n                \"type\": \"number\"\n              }\n            ]\n          }\n        }\n      },\n      \"required\": [\n        \"coeffs\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"Debye\": {\n      \"title\": \"Debye\",\n      \"description\": \"A dispersive medium described by the Debye model.\\nThe frequency-dependence of the complex-valued permittivity is described by:\\n\\nParameters\\n----------\\nname : Optional[str] = None\\n    Optional unique name for medium.\\nfrequency_range : Optional[Tuple[Union[float, NegInf], Union[float, Inf]]] = None\\n    [units = Hz].  Optional range of validity for the medium.\\neps_inf : float = 1.0\\n    Relative permittivity at infinite frequency (:math:`\\\\epsilon_\\\\infty`).\\ncoeffs : List[Tuple[float, pydantic.types.PositiveFloat]] = None\\n    List of (:math:`\\\\Delta\\\\epsilon_i, \\\\tau_i`) values for model (Hz, sec).\\n\\nNote\\n----\\n.. math::\\n\\n    \\\\epsilon(f) = \\\\epsilon_\\\\infty + \\\\sum_i\\n    \\\\frac{\\\\Delta\\\\epsilon_i}{1 - jf\\\\tau_i}\\n\\nExample\\n-------\\n>>> debye_medium = Debye(eps_inf=2.0, coeffs=[(1,2),(3,4)])\\n>>> eps = debye_medium.eps_model(200e12)\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"title\": \"Name\",\n          \"description\": \"Optional unique name for medium.\",\n          \"type\": \"string\"\n        },\n        \"frequency_range\": {\n          \"title\": \"Frequency Range\",\n          \"description\": \"Optional range of validity for the medium.\",\n          \"units\": \"Hz\",\n          \"type\": \"array\",\n          \"minItems\": 2,\n          \"maxItems\": 2,\n          \"items\": [\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"$ref\": \"#/definitions/NegInf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"Debye\",\n          \"enum\": [\n            \"Debye\"\n          ],\n          \"type\": \"string\"\n        },\n        \"eps_inf\": {\n          \"title\": \"Epsilon at Infinity\",\n          \"description\": \"Relative permittivity at infinite frequency (:math:`\\\\epsilon_\\\\infty`).\",\n          \"default\": 1.0,\n          \"type\": \"number\"\n        },\n        \"coeffs\": {\n          \"title\": \"Coefficients\",\n          \"description\": \"List of (:math:`\\\\Delta\\\\epsilon_i, \\\\tau_i`) values for model (Hz, sec).\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"array\",\n            \"minItems\": 2,\n            \"maxItems\": 2,\n            \"items\": [\n              {\n                \"type\": \"number\"\n              },\n              {\n                \"type\": \"number\",\n                \"exclusiveMinimum\": 0\n              }\n            ]\n          }\n        }\n      },\n      \"required\": [\n        \"coeffs\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"Drude\": {\n      \"title\": \"Drude\",\n      \"description\": \"A dispersive medium described by the Drude model.\\nThe frequency-dependence of the complex-valued permittivity is described by:\\n\\nParameters\\n----------\\nname : Optional[str] = None\\n    Optional unique name for medium.\\nfrequency_range : Optional[Tuple[Union[float, NegInf], Union[float, Inf]]] = None\\n    [units = Hz].  Optional range of validity for the medium.\\neps_inf : float = 1.0\\n    Relative permittivity at infinite frequency (:math:`\\\\epsilon_\\\\infty`).\\ncoeffs : List[Tuple[float, pydantic.types.PositiveFloat]] = None\\n    List of (:math:`f_i, \\\\delta_i`) values for model (Hz).\\n\\nNote\\n----\\n.. math::\\n\\n    \\\\epsilon(f) = \\\\epsilon_\\\\infty - \\\\sum_i\\n    \\\\frac{ f_i^2}{f^2 + jf\\\\delta_i}\\n\\nExample\\n-------\\n>>> drude_medium = Drude(eps_inf=2.0, coeffs=[(1,2), (3,4)])\\n>>> eps = drude_medium.eps_model(200e12)\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"title\": \"Name\",\n          \"description\": \"Optional unique name for medium.\",\n          \"type\": \"string\"\n        },\n        \"frequency_range\": {\n          \"title\": \"Frequency Range\",\n          \"description\": \"Optional range of validity for the medium.\",\n          \"units\": \"Hz\",\n          \"type\": \"array\",\n          \"minItems\": 2,\n          \"maxItems\": 2,\n          \"items\": [\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"$ref\": \"#/definitions/NegInf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"Drude\",\n          \"enum\": [\n            \"Drude\"\n          ],\n          \"type\": \"string\"\n        },\n        \"eps_inf\": {\n          \"title\": \"Epsilon at Infinity\",\n          \"description\": \"Relative permittivity at infinite frequency (:math:`\\\\epsilon_\\\\infty`).\",\n          \"default\": 1.0,\n          \"type\": \"number\"\n        },\n        \"coeffs\": {\n          \"title\": \"Coefficients\",\n          \"description\": \"List of (:math:`f_i, \\\\delta_i`) values for model (Hz).\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"array\",\n            \"minItems\": 2,\n            \"maxItems\": 2,\n            \"items\": [\n              {\n                \"type\": \"number\"\n              },\n              {\n                \"type\": \"number\",\n                \"exclusiveMinimum\": 0\n              }\n            ]\n          }\n        }\n      },\n      \"required\": [\n        \"coeffs\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"Box\": {\n      \"title\": \"Box\",\n      \"description\": \"Rectangular prism.\\n   Also base class for :class:`Simulation`, :class:`Monitor`, and :class:`Source`.\\n\\nParameters\\n----------\\ncenter : Tuple[float, float, float] = (0.0, 0.0, 0.0)\\n    [units = um].  Center of object in x, y, and z.\\nsize : Tuple[Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf]] = None\\n    [units = um].  Size in x, y, and z directions.\\n\\nExample\\n-------\\n>>> b = Box(center=(1,2,3), size=(2,2,2))\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"center\": {\n          \"title\": \"Center\",\n          \"description\": \"Center of object in x, y, and z.\",\n          \"default\": [\n            0.0,\n            0.0,\n            0.0\n          ],\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"Box\",\n          \"enum\": [\n            \"Box\"\n          ],\n          \"type\": \"string\"\n        },\n        \"size\": {\n          \"title\": \"Size\",\n          \"description\": \"Size in x, y, and z directions.\",\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"size\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"Sphere\": {\n      \"title\": \"Sphere\",\n      \"description\": \"Spherical geometry.\\n\\nParameters\\n----------\\ncenter : Tuple[float, float, float] = (0.0, 0.0, 0.0)\\n    [units = um].  Center of object in x, y, and z.\\nradius : NonNegativeFloat = None\\n    [units = um].  Radius of geometry.\\n\\nExample\\n-------\\n>>> b = Sphere(center=(1,2,3), radius=2)\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"center\": {\n          \"title\": \"Center\",\n          \"description\": \"Center of object in x, y, and z.\",\n          \"default\": [\n            0.0,\n            0.0,\n            0.0\n          ],\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"Sphere\",\n          \"enum\": [\n            \"Sphere\"\n          ],\n          \"type\": \"string\"\n        },\n        \"radius\": {\n          \"title\": \"Radius\",\n          \"description\": \"Radius of geometry.\",\n          \"units\": \"um\",\n          \"minimum\": 0,\n          \"type\": \"number\"\n        }\n      },\n      \"required\": [\n        \"radius\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"Cylinder\": {\n      \"title\": \"Cylinder\",\n      \"description\": \"Cylindrical geometry.\\n\\nParameters\\n----------\\ncenter : Tuple[float, float, float] = (0.0, 0.0, 0.0)\\n    [units = um].  Center of object in x, y, and z.\\naxis : Literal[0, 1, 2] = 2\\n    Specifies dimension of the planar axis (0,1,2) -> (x,y,z).\\nlength : NonNegativeFloat = None\\n    [units = um].  Defines thickness of cylinder along axis dimension.\\nradius : NonNegativeFloat = None\\n    [units = um].  Radius of geometry.\\n\\nExample\\n-------\\n>>> c = Cylinder(center=(1,2,3), radius=2, length=5, axis=2)\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"center\": {\n          \"title\": \"Center\",\n          \"description\": \"Center of object in x, y, and z.\",\n          \"default\": [\n            0.0,\n            0.0,\n            0.0\n          ],\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"Cylinder\",\n          \"enum\": [\n            \"Cylinder\"\n          ],\n          \"type\": \"string\"\n        },\n        \"axis\": {\n          \"title\": \"Axis\",\n          \"description\": \"Specifies dimension of the planar axis (0,1,2) -> (x,y,z).\",\n          \"default\": 2,\n          \"enum\": [\n            0,\n            1,\n            2\n          ],\n          \"type\": \"integer\"\n        },\n        \"length\": {\n          \"title\": \"Length\",\n          \"description\": \"Defines thickness of cylinder along axis dimension.\",\n          \"units\": \"um\",\n          \"minimum\": 0,\n          \"type\": \"number\"\n        },\n        \"radius\": {\n          \"title\": \"Radius\",\n          \"description\": \"Radius of geometry.\",\n          \"units\": \"um\",\n          \"minimum\": 0,\n          \"type\": \"number\"\n        }\n      },\n      \"required\": [\n        \"length\",\n        \"radius\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"NumpyArray\": {\n      \"title\": \"NumpyArray\",\n      \"description\": \"Wrapper around numpy arrays that has a well defined json schema.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"data_list\": {\n          \"title\": \"Data List\",\n          \"type\": \"array\",\n          \"items\": {}\n        }\n      },\n      \"required\": [\n        \"data_list\"\n      ]\n    },\n    \"PolySlab\": {\n      \"title\": \"PolySlab\",\n      \"description\": \"Polygon with constant thickness (slab) along axis direction.\\n\\nParameters\\n----------\\ncenter : Tuple[float, float, float] = (0.0, 0.0, 0.0)\\n    [units = um].  Center of object in x, y, and z.\\naxis : Literal[0, 1, 2] = 2\\n    Specifies dimension of the planar axis (0,1,2) -> (x,y,z).\\nlength : Optional[NonNegativeFloat] = None\\n    [units = um].  Defines thickness of geometry along axis dimension.\\nslab_bounds : Tuple[float, float] = None\\n    [units = um].  Minimum and maximum positions of the slab along axis dimension.\\nvertices : Union[List[Tuple[float, float]], tidynumpy, NumpyArray, List] = None\\n    [units = um].  List of (d1, d2) defining the 2 dimensional positions of the polygon face vertices along dimensions parallel to slab normal axis.\\n\\nExample\\n-------\\n>>> vertices = np.array([(0,0), (1,0), (1,1)])\\n>>> p = PolySlab(vertices=vertices, axis=2, slab_bounds=(-1, 1))\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"center\": {\n          \"title\": \"Center\",\n          \"description\": \"Center of object in x, y, and z.\",\n          \"default\": [\n            0.0,\n            0.0,\n            0.0\n          ],\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"PolySlab\",\n          \"enum\": [\n            \"PolySlab\"\n          ],\n          \"type\": \"string\"\n        },\n        \"axis\": {\n          \"title\": \"Axis\",\n          \"description\": \"Specifies dimension of the planar axis (0,1,2) -> (x,y,z).\",\n          \"default\": 2,\n          \"enum\": [\n            0,\n            1,\n            2\n          ],\n          \"type\": \"integer\"\n        },\n        \"length\": {\n          \"title\": \"Length\",\n          \"description\": \"Defines thickness of geometry along axis dimension.\",\n          \"units\": \"um\",\n          \"minimum\": 0,\n          \"type\": \"number\"\n        },\n        \"slab_bounds\": {\n          \"title\": \"Slab Bounds\",\n          \"description\": \"Minimum and maximum positions of the slab along axis dimension.\",\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 2,\n          \"maxItems\": 2,\n          \"items\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            }\n          ]\n        },\n        \"vertices\": {\n          \"title\": \"Vertices\",\n          \"description\": \"List of (d1, d2) defining the 2 dimensional positions of the polygon face vertices along dimensions parallel to slab normal axis.\",\n          \"units\": \"um\",\n          \"anyOf\": [\n            {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"array\",\n                \"minItems\": 2,\n                \"maxItems\": 2,\n                \"items\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"number\"\n                  }\n                ]\n              }\n            },\n            {\n              \"title\": \"NumpyArray\",\n              \"description\": \"Wrapper around numpy arrays that has a well defined json schema.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"data_list\": {\n                  \"title\": \"Data List\",\n                  \"type\": \"array\",\n                  \"items\": {}\n                }\n              },\n              \"required\": [\n                \"data_list\"\n              ]\n            },\n            {\n              \"$ref\": \"#/definitions/NumpyArray\"\n            },\n            {\n              \"type\": \"array\",\n              \"items\": {}\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"slab_bounds\",\n        \"vertices\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"Structure\": {\n      \"title\": \"Structure\",\n      \"description\": \"Defines a physical object that interacts with the electromagnetic fields.\\nA :class:`Structure` is a combination of a material property (:class:`AbstractMedium`)\\nand a :class:`Geometry`.\\n\\nParameters\\n----------\\ngeometry : Union[Box, Sphere, Cylinder, PolySlab] = None\\n    Defines spatial extent of the structure.\\nmedium : Union[Medium, AnisotropicMedium, PECMedium, PoleResidue, Sellmeier, Lorentz, Debye, Drude] = None\\n    Defines the electromagnetic properties of the structure material.\\nname : Optional[str] = None\\n    Optional name for the structure.\\n\\nExample\\n-------\\n>>> box = Box(center=(0,0,1), size=(2, 2, 2))\\n>>> glass = Medium(permittivity=3.9)\\n>>> struct = Structure(geometry=box, medium=glass, name='glass_box')\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"geometry\": {\n          \"title\": \"Geometry\",\n          \"description\": \"Defines spatial extent of the structure.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Box\"\n            },\n            {\n              \"$ref\": \"#/definitions/Sphere\"\n            },\n            {\n              \"$ref\": \"#/definitions/Cylinder\"\n            },\n            {\n              \"$ref\": \"#/definitions/PolySlab\"\n            }\n          ]\n        },\n        \"medium\": {\n          \"title\": \"Medium\",\n          \"description\": \"Defines the electromagnetic properties of the structure material.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Medium\"\n            },\n            {\n              \"$ref\": \"#/definitions/AnisotropicMedium\"\n            },\n            {\n              \"$ref\": \"#/definitions/PECMedium\"\n            },\n            {\n              \"$ref\": \"#/definitions/PoleResidue\"\n            },\n            {\n              \"$ref\": \"#/definitions/Sellmeier\"\n            },\n            {\n              \"$ref\": \"#/definitions/Lorentz\"\n            },\n            {\n              \"$ref\": \"#/definitions/Debye\"\n            },\n            {\n              \"$ref\": \"#/definitions/Drude\"\n            }\n          ]\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"description\": \"Optional name for the structure.\",\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"Structure\",\n          \"enum\": [\n            \"Structure\"\n          ],\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"geometry\",\n        \"medium\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"GaussianPulse\": {\n      \"title\": \"GaussianPulse\",\n      \"description\": \"Source time dependence that describes a Gaussian pulse.\\n\\nParameters\\n----------\\namplitude : NonNegativeFloat = 1.0\\n    Real-valued maximum amplitude of the time dependence.\\nphase : float = 0.0\\n    [units = rad].  Phase shift of the time dependence.\\nfreq0 : PositiveFloat = None\\n    [units = Hz].  Central frequency of the pulse.\\nfwidth : PositiveFloat = None\\n    [units = Hz].  Standard deviation of the frequency content of the pulse.\\noffset : ConstrainedFloatValue = 5.0\\n    Time delay of the maximum value of the pulse in units of 1 / ``fwidth``.\\n\\nExample\\n-------\\n>>> pulse = GaussianPulse(freq0=200e12, fwidth=20e12)\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"amplitude\": {\n          \"title\": \"Amplitude\",\n          \"description\": \"Real-valued maximum amplitude of the time dependence.\",\n          \"default\": 1.0,\n          \"minimum\": 0,\n          \"type\": \"number\"\n        },\n        \"phase\": {\n          \"title\": \"Phase\",\n          \"description\": \"Phase shift of the time dependence.\",\n          \"default\": 0.0,\n          \"units\": \"rad\",\n          \"type\": \"number\"\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"GaussianPulse\",\n          \"enum\": [\n            \"GaussianPulse\"\n          ],\n          \"type\": \"string\"\n        },\n        \"freq0\": {\n          \"title\": \"Central Frequency\",\n          \"description\": \"Central frequency of the pulse.\",\n          \"units\": \"Hz\",\n          \"exclusiveMinimum\": 0,\n          \"type\": \"number\"\n        },\n        \"fwidth\": {\n          \"title\": \"Fwidth\",\n          \"description\": \"Standard deviation of the frequency content of the pulse.\",\n          \"units\": \"Hz\",\n          \"exclusiveMinimum\": 0,\n          \"type\": \"number\"\n        },\n        \"offset\": {\n          \"title\": \"Offset\",\n          \"description\": \"Time delay of the maximum value of the pulse in units of 1 / ``fwidth``.\",\n          \"default\": 5.0,\n          \"minimum\": 2.5,\n          \"type\": \"number\"\n        }\n      },\n      \"required\": [\n        \"freq0\",\n        \"fwidth\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"ContinuousWave\": {\n      \"title\": \"ContinuousWave\",\n      \"description\": \"Source time dependence that ramps up to continuous oscillation\\nand holds until end of simulation.\\n\\nParameters\\n----------\\namplitude : NonNegativeFloat = 1.0\\n    Real-valued maximum amplitude of the time dependence.\\nphase : float = 0.0\\n    [units = rad].  Phase shift of the time dependence.\\nfreq0 : PositiveFloat = None\\n    [units = Hz].  Central frequency of the pulse.\\nfwidth : PositiveFloat = None\\n    [units = Hz].  Standard deviation of the frequency content of the pulse.\\noffset : ConstrainedFloatValue = 5.0\\n    Time delay of the maximum value of the pulse in units of 1 / ``fwidth``.\\n\\nExample\\n-------\\n>>> cw = ContinuousWave(freq0=200e12, fwidth=20e12)\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"amplitude\": {\n          \"title\": \"Amplitude\",\n          \"description\": \"Real-valued maximum amplitude of the time dependence.\",\n          \"default\": 1.0,\n          \"minimum\": 0,\n          \"type\": \"number\"\n        },\n        \"phase\": {\n          \"title\": \"Phase\",\n          \"description\": \"Phase shift of the time dependence.\",\n          \"default\": 0.0,\n          \"units\": \"rad\",\n          \"type\": \"number\"\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"ContinuousWave\",\n          \"enum\": [\n            \"ContinuousWave\"\n          ],\n          \"type\": \"string\"\n        },\n        \"freq0\": {\n          \"title\": \"Central Frequency\",\n          \"description\": \"Central frequency of the pulse.\",\n          \"units\": \"Hz\",\n          \"exclusiveMinimum\": 0,\n          \"type\": \"number\"\n        },\n        \"fwidth\": {\n          \"title\": \"Fwidth\",\n          \"description\": \"Standard deviation of the frequency content of the pulse.\",\n          \"units\": \"Hz\",\n          \"exclusiveMinimum\": 0,\n          \"type\": \"number\"\n        },\n        \"offset\": {\n          \"title\": \"Offset\",\n          \"description\": \"Time delay of the maximum value of the pulse in units of 1 / ``fwidth``.\",\n          \"default\": 5.0,\n          \"minimum\": 2.5,\n          \"type\": \"number\"\n        }\n      },\n      \"required\": [\n        \"freq0\",\n        \"fwidth\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"VolumeSource\": {\n      \"title\": \"VolumeSource\",\n      \"description\": \"Source spanning a rectangular volume with uniform time dependence.\\n\\nParameters\\n----------\\ncenter : Tuple[float, float, float] = (0.0, 0.0, 0.0)\\n    [units = um].  Center of object in x, y, and z.\\nsize : Tuple[Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf]] = None\\n    [units = um].  Size in x, y, and z directions.\\nsource_time : Union[GaussianPulse, ContinuousWave] = None\\n    Specification of the source time-dependence.\\nname : Optional[str] = None\\n    Optional name for the source.\\npolarization : Literal['Ex', 'Ey', 'Ez', 'Hx', 'Hy', 'Hz'] = None\\n    Specifies the direction and type of current component.\\n\\nExample\\n-------\\n>>> pulse = GaussianPulse(freq0=200e12, fwidth=20e12)\\n>>> pt_source = VolumeSource(size=(0,0,0), source_time=pulse, polarization='Ex')\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"center\": {\n          \"title\": \"Center\",\n          \"description\": \"Center of object in x, y, and z.\",\n          \"default\": [\n            0.0,\n            0.0,\n            0.0\n          ],\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"VolumeSource\",\n          \"enum\": [\n            \"VolumeSource\"\n          ],\n          \"type\": \"string\"\n        },\n        \"size\": {\n          \"title\": \"Size\",\n          \"description\": \"Size in x, y, and z directions.\",\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            }\n          ]\n        },\n        \"source_time\": {\n          \"title\": \"Source Time\",\n          \"description\": \"Specification of the source time-dependence.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/GaussianPulse\"\n            },\n            {\n              \"$ref\": \"#/definitions/ContinuousWave\"\n            }\n          ]\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"description\": \"Optional name for the source.\",\n          \"type\": \"string\"\n        },\n        \"polarization\": {\n          \"title\": \"Polarization\",\n          \"description\": \"Specifies the direction and type of current component.\",\n          \"enum\": [\n            \"Ex\",\n            \"Ey\",\n            \"Ez\",\n            \"Hx\",\n            \"Hy\",\n            \"Hz\"\n          ],\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"size\",\n        \"source_time\",\n        \"polarization\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"PlaneWave\": {\n      \"title\": \"PlaneWave\",\n      \"description\": \"Uniform current distribution on an infinite extent plane.\\n\\nParameters\\n----------\\ncenter : Tuple[float, float, float] = (0.0, 0.0, 0.0)\\n    [units = um].  Center of object in x, y, and z.\\nsize : Tuple[Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf]] = None\\n    [units = um].  Size in x, y, and z directions.\\nsource_time : Union[GaussianPulse, ContinuousWave] = None\\n    Specification of the source time-dependence.\\nname : Optional[str] = None\\n    Optional name for the source.\\ndirection : Literal['+', '-'] = None\\n    Specifies propagation in positive or negative direction of the normal axis.\\npol_angle : float = 0\\n    [units = rad].  Specifies the angle between the electric field polarization of the source and the plane defined by the normal axis and the propagation axis (rad). ``pol_angle=0`` (default) specifies P polarization, while ``pol_angle=np.pi/2`` specifies S polarization. At normal incidence when S and P are undefined, ``pol_angle=0`` defines: - ``Ey`` polarization for propagation along ``x``.- ``Ex`` polarization for propagation along ``y``.- ``Ex`` polarization for propagation along ``z``.\\n\\nExample\\n-------\\n>>> pulse = GaussianPulse(freq0=200e12, fwidth=20e12)\\n>>> pw_source = PlaneWave(size=(inf,0,inf), source_time=pulse, pol_angle=0.1, direction='+')\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"center\": {\n          \"title\": \"Center\",\n          \"description\": \"Center of object in x, y, and z.\",\n          \"default\": [\n            0.0,\n            0.0,\n            0.0\n          ],\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"PlaneWave\",\n          \"enum\": [\n            \"PlaneWave\"\n          ],\n          \"type\": \"string\"\n        },\n        \"size\": {\n          \"title\": \"Size\",\n          \"description\": \"Size in x, y, and z directions.\",\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            }\n          ]\n        },\n        \"source_time\": {\n          \"title\": \"Source Time\",\n          \"description\": \"Specification of the source time-dependence.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/GaussianPulse\"\n            },\n            {\n              \"$ref\": \"#/definitions/ContinuousWave\"\n            }\n          ]\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"description\": \"Optional name for the source.\",\n          \"type\": \"string\"\n        },\n        \"direction\": {\n          \"title\": \"Direction\",\n          \"description\": \"Specifies propagation in positive or negative direction of the normal axis.\",\n          \"enum\": [\n            \"+\",\n            \"-\"\n          ],\n          \"type\": \"string\"\n        },\n        \"pol_angle\": {\n          \"title\": \"Polarization Angle\",\n          \"description\": \"Specifies the angle between the electric field polarization of the source and the plane defined by the normal axis and the propagation axis (rad). ``pol_angle=0`` (default) specifies P polarization, while ``pol_angle=np.pi/2`` specifies S polarization. At normal incidence when S and P are undefined, ``pol_angle=0`` defines: - ``Ey`` polarization for propagation along ``x``.- ``Ex`` polarization for propagation along ``y``.- ``Ex`` polarization for propagation along ``z``.\",\n          \"default\": 0,\n          \"units\": \"rad\",\n          \"type\": \"number\"\n        }\n      },\n      \"required\": [\n        \"size\",\n        \"source_time\",\n        \"direction\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"ModeSpec\": {\n      \"title\": \"ModeSpec\",\n      \"description\": \"Stores specifications for the mode solver to find an electromagntic mode.\\nNote, the planar axes are found by popping the propagation axis from {x,y,z}.\\nFor example, if propagation axis is y, the planar axes are ordered {x,z}.\\n\\nParameters\\n----------\\nnum_modes : PositiveInt = 1\\n    Number of modes returned by mode solver.\\ntarget_neff : Optional[PositiveFloat] = None\\n    Guess for effective index of the mode.\\nsymmetries : Tuple[Literal[0, -1, 1], Literal[0, -1, 1]] = (0, 0)\\n    Symmetries to apply to the modes in the two tangential axes. Values of (0, 1,-1) correspond to (none, even, odd) symmetries, respectvely.\\nnum_pml : Tuple[NonNegativeInt, NonNegativeInt] = (0, 0)\\n    Number of standard pml layers to add in the two tangential axes.\\nbend_radius : Optional[float] = None\\n    [units = um].  A curvature radius for simulation of waveguide bends. Can be negative, in which case the mode plane center has a smaller value than the curvature center along the tangential axis perpendicular to the bend axis.\\nbend_axis : Optional[Literal[0, 1]] = None\\n    Index into the first two non-propagating axes defining the normal to the plane in which the bend lies. This must be provided if ``bend_radius`` is not ``None``. For example, for a ring in the global xy-plane, and a mode plane in either the xz or the yz plane, the ``bend_axis`` is always 1 (the global z axis).\\n\\nExample\\n-------\\n>>> mode_spec = ModeSpec(num_modes=3, target_neff=1.5, symmetries=(1, -1))\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"num_modes\": {\n          \"title\": \"Number of modes\",\n          \"description\": \"Number of modes returned by mode solver.\",\n          \"default\": 1,\n          \"exclusiveMinimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"target_neff\": {\n          \"title\": \"Target effective index\",\n          \"description\": \"Guess for effective index of the mode.\",\n          \"exclusiveMinimum\": 0,\n          \"type\": \"number\"\n        },\n        \"symmetries\": {\n          \"title\": \"Tangential symmetries\",\n          \"description\": \"Symmetries to apply to the modes in the two tangential axes. Values of (0, 1,-1) correspond to (none, even, odd) symmetries, respectvely.\",\n          \"default\": [\n            0,\n            0\n          ],\n          \"type\": \"array\",\n          \"minItems\": 2,\n          \"maxItems\": 2,\n          \"items\": [\n            {\n              \"enum\": [\n                0,\n                -1,\n                1\n              ],\n              \"type\": \"integer\"\n            },\n            {\n              \"enum\": [\n                0,\n                -1,\n                1\n              ],\n              \"type\": \"integer\"\n            }\n          ]\n        },\n        \"num_pml\": {\n          \"title\": \"Number of PML layers\",\n          \"description\": \"Number of standard pml layers to add in the two tangential axes.\",\n          \"default\": [\n            0,\n            0\n          ],\n          \"type\": \"array\",\n          \"minItems\": 2,\n          \"maxItems\": 2,\n          \"items\": [\n            {\n              \"type\": \"integer\",\n              \"minimum\": 0\n            },\n            {\n              \"type\": \"integer\",\n              \"minimum\": 0\n            }\n          ]\n        },\n        \"bend_radius\": {\n          \"title\": \"Bend radius\",\n          \"description\": \"A curvature radius for simulation of waveguide bends. Can be negative, in which case the mode plane center has a smaller value than the curvature center along the tangential axis perpendicular to the bend axis.\",\n          \"units\": \"um\",\n          \"type\": \"number\"\n        },\n        \"bend_axis\": {\n          \"title\": \"Bend axis\",\n          \"description\": \"Index into the first two non-propagating axes defining the normal to the plane in which the bend lies. This must be provided if ``bend_radius`` is not ``None``. For example, for a ring in the global xy-plane, and a mode plane in either the xz or the yz plane, the ``bend_axis`` is always 1 (the global z axis).\",\n          \"enum\": [\n            0,\n            1\n          ],\n          \"type\": \"integer\"\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"ModeSpec\",\n          \"enum\": [\n            \"ModeSpec\"\n          ],\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"ModeSource\": {\n      \"title\": \"ModeSource\",\n      \"description\": \"Injects current source to excite modal profile on finite extent plane.\\n\\nParameters\\n----------\\ncenter : Tuple[float, float, float] = (0.0, 0.0, 0.0)\\n    [units = um].  Center of object in x, y, and z.\\nsize : Tuple[Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf]] = None\\n    [units = um].  Size in x, y, and z directions.\\nsource_time : Union[GaussianPulse, ContinuousWave] = None\\n    Specification of the source time-dependence.\\nname : Optional[str] = None\\n    Optional name for the source.\\ndirection : Literal['+', '-'] = None\\n    Specifies propagation in positive or negative direction of the normal axis.\\nmode_spec : ModeSpec = ModeSpec(num_modes=1, target_neff=None, symmetries=(0,, 0), num_pml=(0,, 0), bend_radius=None, bend_axis=None, type='ModeSpec')\\n    Parameters to feed to mode solver which determine modes measured by monitor.\\nmode_index : NonNegativeInt = 0\\n    Index into the collection of modes returned by mode solver.  Specifies which mode to inject using this source. If larger than ``mode_spec.num_modes``, ``num_modes`` in the solver will be set to ``mode_index + 1``.\\n\\nExample\\n-------\\n>>> pulse = GaussianPulse(freq0=200e12, fwidth=20e12)\\n>>> mode_spec = ModeSpec(target_neff=2.)\\n>>> mode_source = ModeSource(\\n...     size=(10,10,0),\\n...     source_time=pulse,\\n...     mode_spec=mode_spec,\\n...     mode_index=1,\\n...     direction='-')\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"center\": {\n          \"title\": \"Center\",\n          \"description\": \"Center of object in x, y, and z.\",\n          \"default\": [\n            0.0,\n            0.0,\n            0.0\n          ],\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"ModeSource\",\n          \"enum\": [\n            \"ModeSource\"\n          ],\n          \"type\": \"string\"\n        },\n        \"size\": {\n          \"title\": \"Size\",\n          \"description\": \"Size in x, y, and z directions.\",\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            }\n          ]\n        },\n        \"source_time\": {\n          \"title\": \"Source Time\",\n          \"description\": \"Specification of the source time-dependence.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/GaussianPulse\"\n            },\n            {\n              \"$ref\": \"#/definitions/ContinuousWave\"\n            }\n          ]\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"description\": \"Optional name for the source.\",\n          \"type\": \"string\"\n        },\n        \"direction\": {\n          \"title\": \"Direction\",\n          \"description\": \"Specifies propagation in positive or negative direction of the normal axis.\",\n          \"enum\": [\n            \"+\",\n            \"-\"\n          ],\n          \"type\": \"string\"\n        },\n        \"mode_spec\": {\n          \"title\": \"Mode Specification\",\n          \"description\": \"Parameters to feed to mode solver which determine modes measured by monitor.\",\n          \"default\": {\n            \"num_modes\": 1,\n            \"target_neff\": null,\n            \"symmetries\": [\n              0,\n              0\n            ],\n            \"num_pml\": [\n              0,\n              0\n            ],\n            \"bend_radius\": null,\n            \"bend_axis\": null,\n            \"type\": \"ModeSpec\"\n          },\n          \"allOf\": [\n            {\n              \"$ref\": \"#/definitions/ModeSpec\"\n            }\n          ]\n        },\n        \"mode_index\": {\n          \"title\": \"Mode Index\",\n          \"description\": \"Index into the collection of modes returned by mode solver.  Specifies which mode to inject using this source. If larger than ``mode_spec.num_modes``, ``num_modes`` in the solver will be set to ``mode_index + 1``.\",\n          \"default\": 0,\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        }\n      },\n      \"required\": [\n        \"size\",\n        \"source_time\",\n        \"direction\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"GaussianBeam\": {\n      \"title\": \"GaussianBeam\",\n      \"description\": \"Guassian distribution on finite extent plane.\\n\\nParameters\\n----------\\ncenter : Tuple[float, float, float] = (0.0, 0.0, 0.0)\\n    [units = um].  Center of object in x, y, and z.\\nsize : Tuple[Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf]] = None\\n    [units = um].  Size in x, y, and z directions.\\nsource_time : Union[GaussianPulse, ContinuousWave] = None\\n    Specification of the source time-dependence.\\nname : Optional[str] = None\\n    Optional name for the source.\\ndirection : Literal['+', '-'] = None\\n    Specifies propagation in positive or negative direction of the normal axis.\\npol_angle : float = 0\\n    [units = rad].  Specifies the angle between the electric field polarization of the source and the plane defined by the normal axis and the propagation axis (rad). ``pol_angle=0`` (default) specifies P polarization, while ``pol_angle=np.pi/2`` specifies S polarization. At normal incidence when S and P are undefined, ``pol_angle=0`` defines: - ``Ey`` polarization for propagation along ``x``.- ``Ex`` polarization for propagation along ``y``.- ``Ex`` polarization for propagation along ``z``.\\nwaist_radius : PositiveFloat = 1.0\\n    [units = um].  Radius of the beam at the waist.\\nwaist_distance : float = 0.0\\n    [units = um].  Distance from the beam waist along the propagation direction.\\nangle_theta : float = 0.0\\n    [units = rad].  Polar angle from the normal axis.\\nangle_phi : float = 0.0\\n    [units = rad].  Azimuth angle in the plane orthogonal to the normal axis.\\n\\nExample\\n-------\\n>>> pulse = GaussianPulse(freq0=200e12, fwidth=20e12)\\n>>> gauss = GaussianBeam(\\n...     size=(0,3,3),\\n...     source_time=pulse,\\n...     pol_angle=np.pi / 2,\\n...     direction='+',\\n...     waist_radius=1.0)\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"center\": {\n          \"title\": \"Center\",\n          \"description\": \"Center of object in x, y, and z.\",\n          \"default\": [\n            0.0,\n            0.0,\n            0.0\n          ],\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"GaussianBeam\",\n          \"enum\": [\n            \"GaussianBeam\"\n          ],\n          \"type\": \"string\"\n        },\n        \"size\": {\n          \"title\": \"Size\",\n          \"description\": \"Size in x, y, and z directions.\",\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            }\n          ]\n        },\n        \"source_time\": {\n          \"title\": \"Source Time\",\n          \"description\": \"Specification of the source time-dependence.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/GaussianPulse\"\n            },\n            {\n              \"$ref\": \"#/definitions/ContinuousWave\"\n            }\n          ]\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"description\": \"Optional name for the source.\",\n          \"type\": \"string\"\n        },\n        \"direction\": {\n          \"title\": \"Direction\",\n          \"description\": \"Specifies propagation in positive or negative direction of the normal axis.\",\n          \"enum\": [\n            \"+\",\n            \"-\"\n          ],\n          \"type\": \"string\"\n        },\n        \"pol_angle\": {\n          \"title\": \"Polarization Angle\",\n          \"description\": \"Specifies the angle between the electric field polarization of the source and the plane defined by the normal axis and the propagation axis (rad). ``pol_angle=0`` (default) specifies P polarization, while ``pol_angle=np.pi/2`` specifies S polarization. At normal incidence when S and P are undefined, ``pol_angle=0`` defines: - ``Ey`` polarization for propagation along ``x``.- ``Ex`` polarization for propagation along ``y``.- ``Ex`` polarization for propagation along ``z``.\",\n          \"default\": 0,\n          \"units\": \"rad\",\n          \"type\": \"number\"\n        },\n        \"waist_radius\": {\n          \"title\": \"Waist Radius\",\n          \"description\": \"Radius of the beam at the waist.\",\n          \"default\": 1.0,\n          \"units\": \"um\",\n          \"exclusiveMinimum\": 0,\n          \"type\": \"number\"\n        },\n        \"waist_distance\": {\n          \"title\": \"Waist Distance\",\n          \"description\": \"Distance from the beam waist along the propagation direction.\",\n          \"default\": 0.0,\n          \"units\": \"um\",\n          \"type\": \"number\"\n        },\n        \"angle_theta\": {\n          \"title\": \"Polar Angle\",\n          \"description\": \"Polar angle from the normal axis.\",\n          \"default\": 0.0,\n          \"units\": \"rad\",\n          \"type\": \"number\"\n        },\n        \"angle_phi\": {\n          \"title\": \"Azimuth Angle\",\n          \"description\": \"Azimuth angle in the plane orthogonal to the normal axis.\",\n          \"default\": 0.0,\n          \"units\": \"rad\",\n          \"type\": \"number\"\n        }\n      },\n      \"required\": [\n        \"size\",\n        \"source_time\",\n        \"direction\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"FieldMonitor\": {\n      \"title\": \"FieldMonitor\",\n      \"description\": \":class:`Monitor` that records electromagnetic fields in the frequency domain.\\n\\nParameters\\n----------\\ncenter : Tuple[float, float, float] = (0.0, 0.0, 0.0)\\n    [units = um].  Center of object in x, y, and z.\\nsize : Tuple[Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf]] = None\\n    [units = um].  Size in x, y, and z directions.\\nname : ConstrainedStrValue = None\\n    Unique name for monitor.\\nfreqs : Union[List[float], tidynumpy, NumpyArray, List] = None\\n    [units = Hz].  Array or list of frequencies stored by the field monitor.\\nfields : List[Literal['Ex', 'Ey', 'Ez', 'Hx', 'Hy', 'Hz']] = ['Ex', 'Ey', 'Ez', 'Hx', 'Hy', 'Hz']\\n    Collection of field components to store in the monitor.\\n\\nExample\\n-------\\n>>> monitor = FieldMonitor(\\n...     center=(1,2,3),\\n...     size=(2,2,2),\\n...     fields=['Hx'],\\n...     freqs=[250e12, 300e12],\\n...     name='steady_state_monitor')\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"center\": {\n          \"title\": \"Center\",\n          \"description\": \"Center of object in x, y, and z.\",\n          \"default\": [\n            0.0,\n            0.0,\n            0.0\n          ],\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"FieldMonitor\",\n          \"enum\": [\n            \"FieldMonitor\"\n          ],\n          \"type\": \"string\"\n        },\n        \"size\": {\n          \"title\": \"Size\",\n          \"description\": \"Size in x, y, and z directions.\",\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            }\n          ]\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"description\": \"Unique name for monitor.\",\n          \"minLength\": 1,\n          \"type\": \"string\"\n        },\n        \"freqs\": {\n          \"title\": \"Frequencies\",\n          \"description\": \"Array or list of frequencies stored by the field monitor.\",\n          \"units\": \"Hz\",\n          \"anyOf\": [\n            {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"number\"\n              }\n            },\n            {\n              \"title\": \"NumpyArray\",\n              \"description\": \"Wrapper around numpy arrays that has a well defined json schema.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"data_list\": {\n                  \"title\": \"Data List\",\n                  \"type\": \"array\",\n                  \"items\": {}\n                }\n              },\n              \"required\": [\n                \"data_list\"\n              ]\n            },\n            {\n              \"$ref\": \"#/definitions/NumpyArray\"\n            },\n            {\n              \"type\": \"array\",\n              \"items\": {}\n            }\n          ]\n        },\n        \"fields\": {\n          \"title\": \"Field Components\",\n          \"description\": \"Collection of field components to store in the monitor.\",\n          \"default\": [\n            \"Ex\",\n            \"Ey\",\n            \"Ez\",\n            \"Hx\",\n            \"Hy\",\n            \"Hz\"\n          ],\n          \"type\": \"array\",\n          \"items\": {\n            \"enum\": [\n              \"Ex\",\n              \"Ey\",\n              \"Ez\",\n              \"Hx\",\n              \"Hy\",\n              \"Hz\"\n            ],\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"required\": [\n        \"size\",\n        \"name\",\n        \"freqs\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"FieldTimeMonitor\": {\n      \"title\": \"FieldTimeMonitor\",\n      \"description\": \":class:`Monitor` that records electromagnetic fields in the time domain.\\n\\nParameters\\n----------\\ncenter : Tuple[float, float, float] = (0.0, 0.0, 0.0)\\n    [units = um].  Center of object in x, y, and z.\\nsize : Tuple[Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf]] = None\\n    [units = um].  Size in x, y, and z directions.\\nname : ConstrainedStrValue = None\\n    Unique name for monitor.\\nstart : NonNegativeFloat = 0.0\\n    [units = sec].  Time at which to start monitor recording.\\nstop : Optional[NonNegativeFloat] = None\\n    [units = sec].  Time at which to stop monitor recording.  If not specified, record until end of simulation.\\ninterval : PositiveInt = 1\\n    Number of time step intervals between monitor recordings.\\nfields : List[Literal['Ex', 'Ey', 'Ez', 'Hx', 'Hy', 'Hz']] = ['Ex', 'Ey', 'Ez', 'Hx', 'Hy', 'Hz']\\n    Collection of field components to store in the monitor.\\n\\nExample\\n-------\\n>>> monitor = FieldTimeMonitor(\\n...     center=(1,2,3),\\n...     size=(2,2,2),\\n...     fields=['Hx'],\\n...     start=1e-13,\\n...     stop=5e-13,\\n...     interval=2,\\n...     name='movie_monitor')\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"center\": {\n          \"title\": \"Center\",\n          \"description\": \"Center of object in x, y, and z.\",\n          \"default\": [\n            0.0,\n            0.0,\n            0.0\n          ],\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"FieldTimeMonitor\",\n          \"enum\": [\n            \"FieldTimeMonitor\"\n          ],\n          \"type\": \"string\"\n        },\n        \"size\": {\n          \"title\": \"Size\",\n          \"description\": \"Size in x, y, and z directions.\",\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            }\n          ]\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"description\": \"Unique name for monitor.\",\n          \"minLength\": 1,\n          \"type\": \"string\"\n        },\n        \"start\": {\n          \"title\": \"Start time\",\n          \"description\": \"Time at which to start monitor recording.\",\n          \"default\": 0.0,\n          \"units\": \"sec\",\n          \"minimum\": 0,\n          \"type\": \"number\"\n        },\n        \"stop\": {\n          \"title\": \"Stop time\",\n          \"description\": \"Time at which to stop monitor recording.  If not specified, record until end of simulation.\",\n          \"units\": \"sec\",\n          \"minimum\": 0,\n          \"type\": \"number\"\n        },\n        \"interval\": {\n          \"title\": \"Time interval\",\n          \"description\": \"Number of time step intervals between monitor recordings.\",\n          \"default\": 1,\n          \"exclusiveMinimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"fields\": {\n          \"title\": \"Field Components\",\n          \"description\": \"Collection of field components to store in the monitor.\",\n          \"default\": [\n            \"Ex\",\n            \"Ey\",\n            \"Ez\",\n            \"Hx\",\n            \"Hy\",\n            \"Hz\"\n          ],\n          \"type\": \"array\",\n          \"items\": {\n            \"enum\": [\n              \"Ex\",\n              \"Ey\",\n              \"Ez\",\n              \"Hx\",\n              \"Hy\",\n              \"Hz\"\n            ],\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"required\": [\n        \"size\",\n        \"name\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"FluxMonitor\": {\n      \"title\": \"FluxMonitor\",\n      \"description\": \":class:`Monitor` that records power flux through a plane in the frequency domain.\\n\\nParameters\\n----------\\ncenter : Tuple[float, float, float] = (0.0, 0.0, 0.0)\\n    [units = um].  Center of object in x, y, and z.\\nsize : Tuple[Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf]] = None\\n    [units = um].  Size in x, y, and z directions.\\nname : ConstrainedStrValue = None\\n    Unique name for monitor.\\nfreqs : Union[List[float], tidynumpy, NumpyArray, List] = None\\n    [units = Hz].  Array or list of frequencies stored by the field monitor.\\n\\nExample\\n-------\\n>>> monitor = FluxMonitor(\\n...     center=(1,2,3),\\n...     size=(2,2,0),\\n...     freqs=[200e12, 210e12],\\n...     name='flux_monitor')\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"center\": {\n          \"title\": \"Center\",\n          \"description\": \"Center of object in x, y, and z.\",\n          \"default\": [\n            0.0,\n            0.0,\n            0.0\n          ],\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"FluxMonitor\",\n          \"enum\": [\n            \"FluxMonitor\"\n          ],\n          \"type\": \"string\"\n        },\n        \"size\": {\n          \"title\": \"Size\",\n          \"description\": \"Size in x, y, and z directions.\",\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            }\n          ]\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"description\": \"Unique name for monitor.\",\n          \"minLength\": 1,\n          \"type\": \"string\"\n        },\n        \"freqs\": {\n          \"title\": \"Frequencies\",\n          \"description\": \"Array or list of frequencies stored by the field monitor.\",\n          \"units\": \"Hz\",\n          \"anyOf\": [\n            {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"number\"\n              }\n            },\n            {\n              \"title\": \"NumpyArray\",\n              \"description\": \"Wrapper around numpy arrays that has a well defined json schema.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"data_list\": {\n                  \"title\": \"Data List\",\n                  \"type\": \"array\",\n                  \"items\": {}\n                }\n              },\n              \"required\": [\n                \"data_list\"\n              ]\n            },\n            {\n              \"$ref\": \"#/definitions/NumpyArray\"\n            },\n            {\n              \"type\": \"array\",\n              \"items\": {}\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"size\",\n        \"name\",\n        \"freqs\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"FluxTimeMonitor\": {\n      \"title\": \"FluxTimeMonitor\",\n      \"description\": \":class:`Monitor` that records power flux through a plane in the time domain.\\n\\nParameters\\n----------\\ncenter : Tuple[float, float, float] = (0.0, 0.0, 0.0)\\n    [units = um].  Center of object in x, y, and z.\\nsize : Tuple[Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf]] = None\\n    [units = um].  Size in x, y, and z directions.\\nname : ConstrainedStrValue = None\\n    Unique name for monitor.\\nstart : NonNegativeFloat = 0.0\\n    [units = sec].  Time at which to start monitor recording.\\nstop : Optional[NonNegativeFloat] = None\\n    [units = sec].  Time at which to stop monitor recording.  If not specified, record until end of simulation.\\ninterval : PositiveInt = 1\\n    Number of time step intervals between monitor recordings.\\n\\nExample\\n-------\\n>>> monitor = FluxTimeMonitor(\\n...     center=(1,2,3),\\n...     size=(2,2,0),\\n...     start=1e-13,\\n...     stop=5e-13,\\n...     interval=2,\\n...     name='flux_vs_time')\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"center\": {\n          \"title\": \"Center\",\n          \"description\": \"Center of object in x, y, and z.\",\n          \"default\": [\n            0.0,\n            0.0,\n            0.0\n          ],\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"FluxTimeMonitor\",\n          \"enum\": [\n            \"FluxTimeMonitor\"\n          ],\n          \"type\": \"string\"\n        },\n        \"size\": {\n          \"title\": \"Size\",\n          \"description\": \"Size in x, y, and z directions.\",\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            }\n          ]\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"description\": \"Unique name for monitor.\",\n          \"minLength\": 1,\n          \"type\": \"string\"\n        },\n        \"start\": {\n          \"title\": \"Start time\",\n          \"description\": \"Time at which to start monitor recording.\",\n          \"default\": 0.0,\n          \"units\": \"sec\",\n          \"minimum\": 0,\n          \"type\": \"number\"\n        },\n        \"stop\": {\n          \"title\": \"Stop time\",\n          \"description\": \"Time at which to stop monitor recording.  If not specified, record until end of simulation.\",\n          \"units\": \"sec\",\n          \"minimum\": 0,\n          \"type\": \"number\"\n        },\n        \"interval\": {\n          \"title\": \"Time interval\",\n          \"description\": \"Number of time step intervals between monitor recordings.\",\n          \"default\": 1,\n          \"exclusiveMinimum\": 0,\n          \"type\": \"integer\"\n        }\n      },\n      \"required\": [\n        \"size\",\n        \"name\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"ModeMonitor\": {\n      \"title\": \"ModeMonitor\",\n      \"description\": \":class:`Monitor` that records amplitudes from modal decomposition of fields on plane.\\n\\nParameters\\n----------\\ncenter : Tuple[float, float, float] = (0.0, 0.0, 0.0)\\n    [units = um].  Center of object in x, y, and z.\\nsize : Tuple[Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf], Union[NonNegativeFloat, Inf]] = None\\n    [units = um].  Size in x, y, and z directions.\\nname : ConstrainedStrValue = None\\n    Unique name for monitor.\\nfreqs : Union[List[float], tidynumpy, NumpyArray, List] = None\\n    [units = Hz].  Array or list of frequencies stored by the field monitor.\\nmode_spec : ModeSpec = None\\n    Parameters to feed to mode solver which determine modes measured by monitor.\\n\\nExample\\n-------\\n>>> mode_spec = ModeSpec(num_modes=3)\\n>>> monitor = ModeMonitor(\\n...     center=(1,2,3),\\n...     size=(2,2,0),\\n...     freqs=[200e12, 210e12],\\n...     mode_spec=mode_spec,\\n...     name='mode_monitor')\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"center\": {\n          \"title\": \"Center\",\n          \"description\": \"Center of object in x, y, and z.\",\n          \"default\": [\n            0.0,\n            0.0,\n            0.0\n          ],\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"number\"\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"ModeMonitor\",\n          \"enum\": [\n            \"ModeMonitor\"\n          ],\n          \"type\": \"string\"\n        },\n        \"size\": {\n          \"title\": \"Size\",\n          \"description\": \"Size in x, y, and z directions.\",\n          \"units\": \"um\",\n          \"type\": \"array\",\n          \"minItems\": 3,\n          \"maxItems\": 3,\n          \"items\": [\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            },\n            {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                {\n                  \"$ref\": \"#/definitions/Inf\"\n                }\n              ]\n            }\n          ]\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"description\": \"Unique name for monitor.\",\n          \"minLength\": 1,\n          \"type\": \"string\"\n        },\n        \"freqs\": {\n          \"title\": \"Frequencies\",\n          \"description\": \"Array or list of frequencies stored by the field monitor.\",\n          \"units\": \"Hz\",\n          \"anyOf\": [\n            {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"number\"\n              }\n            },\n            {\n              \"title\": \"NumpyArray\",\n              \"description\": \"Wrapper around numpy arrays that has a well defined json schema.\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"data_list\": {\n                  \"title\": \"Data List\",\n                  \"type\": \"array\",\n                  \"items\": {}\n                }\n              },\n              \"required\": [\n                \"data_list\"\n              ]\n            },\n            {\n              \"$ref\": \"#/definitions/NumpyArray\"\n            },\n            {\n              \"type\": \"array\",\n              \"items\": {}\n            }\n          ]\n        },\n        \"mode_spec\": {\n          \"title\": \"Mode Specification\",\n          \"description\": \"Parameters to feed to mode solver which determine modes measured by monitor.\",\n          \"allOf\": [\n            {\n              \"$ref\": \"#/definitions/ModeSpec\"\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"size\",\n        \"name\",\n        \"freqs\",\n        \"mode_spec\"\n      ],\n      \"additionalProperties\": false\n    },\n    \"PMLParams\": {\n      \"title\": \"PMLParams\",\n      \"description\": \"Specifies full set of parameters needed for complex, frequency-shifted PML.\\n\\nParameters\\n----------\\nsigma_order : NonNegativeInt = 3\\n    Order of the polynomial describing the absorber profile (~dist^sigma_order).\\nsigma_min : NonNegativeFloat = 0.0\\n    [units = 2*EPSILON_0/dt].  Minimum value of the absorber conductivity.\\nsigma_max : NonNegativeFloat = 1.5\\n    [units = 2*EPSILON_0/dt].  Maximum value of the absorber conductivity.\\nkappa_order : NonNegativeInt = 3\\n    Order of the polynomial describing the PML kappa profile (kappa~dist^kappa_order).\\nkappa_min : NonNegativeFloat = 0.0\\n    \\nkappa_max : NonNegativeFloat = 1.5\\n    \\nalpha_order : NonNegativeInt = 3\\n    Order of the polynomial describing the PML alpha profile (alpha~dist^alpha_order).\\nalpha_min : NonNegativeFloat = 0.0\\n    [units = 2*EPSILON_0/dt].  Minimum value of the PML alpha.\\nalpha_max : NonNegativeFloat = 1.5\\n    [units = 2*EPSILON_0/dt].  Maximum value of the PML alpha.\\n\\nExample\\n-------\\n>>> params = PMLParams(sigma_order=3, sigma_min=0.0, sigma_max=1.5, kappa_min=0.0)\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"sigma_order\": {\n          \"title\": \"Sigma Order\",\n          \"description\": \"Order of the polynomial describing the absorber profile (~dist^sigma_order).\",\n          \"default\": 3,\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"sigma_min\": {\n          \"title\": \"Sigma Minimum\",\n          \"description\": \"Minimum value of the absorber conductivity.\",\n          \"default\": 0.0,\n          \"units\": \"2*EPSILON_0/dt\",\n          \"minimum\": 0,\n          \"type\": \"number\"\n        },\n        \"sigma_max\": {\n          \"title\": \"Sigma Maximum\",\n          \"description\": \"Maximum value of the absorber conductivity.\",\n          \"default\": 1.5,\n          \"units\": \"2*EPSILON_0/dt\",\n          \"minimum\": 0,\n          \"type\": \"number\"\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"PMLParams\",\n          \"enum\": [\n            \"PMLParams\"\n          ],\n          \"type\": \"string\"\n        },\n        \"kappa_order\": {\n          \"title\": \"Kappa Order\",\n          \"description\": \"Order of the polynomial describing the PML kappa profile (kappa~dist^kappa_order).\",\n          \"default\": 3,\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"kappa_min\": {\n          \"title\": \"Kappa Minimum\",\n          \"default\": 0.0,\n          \"minimum\": 0,\n          \"type\": \"number\"\n        },\n        \"kappa_max\": {\n          \"title\": \"Kappa Maximum\",\n          \"default\": 1.5,\n          \"minimum\": 0,\n          \"type\": \"number\"\n        },\n        \"alpha_order\": {\n          \"title\": \"Alpha Order\",\n          \"description\": \"Order of the polynomial describing the PML alpha profile (alpha~dist^alpha_order).\",\n          \"default\": 3,\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"alpha_min\": {\n          \"title\": \"Alpha Minimum\",\n          \"description\": \"Minimum value of the PML alpha.\",\n          \"default\": 0.0,\n          \"units\": \"2*EPSILON_0/dt\",\n          \"minimum\": 0,\n          \"type\": \"number\"\n        },\n        \"alpha_max\": {\n          \"title\": \"Alpha Maximum\",\n          \"description\": \"Maximum value of the PML alpha.\",\n          \"default\": 1.5,\n          \"units\": \"2*EPSILON_0/dt\",\n          \"minimum\": 0,\n          \"type\": \"number\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"PML\": {\n      \"title\": \"PML\",\n      \"description\": \"Specifies a standard PML along a single dimension.\\n\\nParameters\\n----------\\nnum_layers : NonNegativeInt = 12\\n    Number of layers of standard PML to add to + and - boundaries.\\nparameters : PMLParams = PMLParams(sigma_order=3, sigma_min=0.0, sigma_max=1.5, type='PMLParams', kappa_order=3, kappa_min=1.0, kappa_max=3.0, alpha_order=1, alpha_min=0.0, alpha_max=0.0)\\n    Parameters of the complex frequency-shifted absorption poles.\\n\\nExample\\n-------\\n>>> pml = PML(num_layers=10)\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"num_layers\": {\n          \"title\": \"Number of Layers\",\n          \"description\": \"Number of layers of standard PML to add to + and - boundaries.\",\n          \"default\": 12,\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"parameters\": {\n          \"title\": \"PML Parameters\",\n          \"description\": \"Parameters of the complex frequency-shifted absorption poles.\",\n          \"default\": {\n            \"sigma_order\": 3,\n            \"sigma_min\": 0.0,\n            \"sigma_max\": 1.5,\n            \"type\": \"PMLParams\",\n            \"kappa_order\": 3,\n            \"kappa_min\": 1.0,\n            \"kappa_max\": 3.0,\n            \"alpha_order\": 1,\n            \"alpha_min\": 0.0,\n            \"alpha_max\": 0.0\n          },\n          \"allOf\": [\n            {\n              \"$ref\": \"#/definitions/PMLParams\"\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"PML\",\n          \"enum\": [\n            \"PML\"\n          ],\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"StablePML\": {\n      \"title\": \"StablePML\",\n      \"description\": \"Specifies a 'stable' PML along a single dimension.\\nThis PML deals handles possbly divergent simulations better, but at the expense of more layers.\\n\\nParameters\\n----------\\nnum_layers : NonNegativeInt = 40\\n    Number of layers of 'stable' PML.\\nparameters : PMLParams = PMLParams(sigma_order=3, sigma_min=0.0, sigma_max=1.0, type='PMLParams', kappa_order=3, kappa_min=1.0, kappa_max=5.0, alpha_order=1, alpha_min=0.0, alpha_max=0.9)\\n    'Stable' parameters of the complex frequency-shifted absorption poles.\\n\\nExample\\n-------\\n>>> pml = StablePML(num_layers=40)\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"num_layers\": {\n          \"title\": \"Number of Layers\",\n          \"description\": \"Number of layers of 'stable' PML.\",\n          \"default\": 40,\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"parameters\": {\n          \"title\": \"Stable PML Parameters\",\n          \"description\": \"'Stable' parameters of the complex frequency-shifted absorption poles.\",\n          \"default\": {\n            \"sigma_order\": 3,\n            \"sigma_min\": 0.0,\n            \"sigma_max\": 1.0,\n            \"type\": \"PMLParams\",\n            \"kappa_order\": 3,\n            \"kappa_min\": 1.0,\n            \"kappa_max\": 5.0,\n            \"alpha_order\": 1,\n            \"alpha_min\": 0.0,\n            \"alpha_max\": 0.9\n          },\n          \"allOf\": [\n            {\n              \"$ref\": \"#/definitions/PMLParams\"\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"StablePML\",\n          \"enum\": [\n            \"StablePML\"\n          ],\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"AbsorberParams\": {\n      \"title\": \"AbsorberParams\",\n      \"description\": \"Specifies parameters common to Absorbers and PMLs.\\n\\nParameters\\n----------\\nsigma_order : NonNegativeInt = 3\\n    Order of the polynomial describing the absorber profile (~dist^sigma_order).\\nsigma_min : NonNegativeFloat = 0.0\\n    [units = 2*EPSILON_0/dt].  Minimum value of the absorber conductivity.\\nsigma_max : NonNegativeFloat = 1.5\\n    [units = 2*EPSILON_0/dt].  Maximum value of the absorber conductivity.\\n\\nExample\\n-------\\n>>> params = AbsorberParams(sigma_order=3, sigma_min=0.0, sigma_max=1.5)\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"sigma_order\": {\n          \"title\": \"Sigma Order\",\n          \"description\": \"Order of the polynomial describing the absorber profile (~dist^sigma_order).\",\n          \"default\": 3,\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"sigma_min\": {\n          \"title\": \"Sigma Minimum\",\n          \"description\": \"Minimum value of the absorber conductivity.\",\n          \"default\": 0.0,\n          \"units\": \"2*EPSILON_0/dt\",\n          \"minimum\": 0,\n          \"type\": \"number\"\n        },\n        \"sigma_max\": {\n          \"title\": \"Sigma Maximum\",\n          \"description\": \"Maximum value of the absorber conductivity.\",\n          \"default\": 1.5,\n          \"units\": \"2*EPSILON_0/dt\",\n          \"minimum\": 0,\n          \"type\": \"number\"\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"AbsorberParams\",\n          \"enum\": [\n            \"AbsorberParams\"\n          ],\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Absorber\": {\n      \"title\": \"Absorber\",\n      \"description\": \"Specifies an adiabatic absorber along a single dimension.\\nThis absorber is well-suited for dispersive materials\\nintersecting with absorbing edges of the simulation at the expense of more layers.\\n\\nParameters\\n----------\\nnum_layers : NonNegativeInt = 40\\n    Number of layers of absorber to add to + and - boundaries.\\nparameters : AbsorberParams = AbsorberParams(sigma_order=3, sigma_min=0.0, sigma_max=6.4, type='AbsorberParams')\\n    Adiabatic absorber parameters.\\n\\nExample\\n-------\\n>>> pml = Absorber(num_layers=40)\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"num_layers\": {\n          \"title\": \"Number of Layers\",\n          \"description\": \"Number of layers of absorber to add to + and - boundaries.\",\n          \"default\": 40,\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"parameters\": {\n          \"title\": \"Absorber Parameters\",\n          \"description\": \"Adiabatic absorber parameters.\",\n          \"default\": {\n            \"sigma_order\": 3,\n            \"sigma_min\": 0.0,\n            \"sigma_max\": 6.4,\n            \"type\": \"AbsorberParams\"\n          },\n          \"allOf\": [\n            {\n              \"$ref\": \"#/definitions/AbsorberParams\"\n            }\n          ]\n        },\n        \"type\": {\n          \"title\": \"Type\",\n          \"default\": \"Absorber\",\n          \"enum\": [\n            \"Absorber\"\n          ],\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  }\n}"